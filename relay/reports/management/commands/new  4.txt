def get_oldest_file(files, _invert=False):
    """ Find and return the oldest file of input file names.
    Only one wins tie. Values based on time distance from present.
    Use of `_invert` inverts logic to make this a youngest routine,
    to be used more clearly via `get_youngest_file`.
    """
    gt = operator.lt if _invert else operator.gt
    # Check for empty list.
    if not files:
        return None
    # Raw epoch distance.
    now = time.time()
    # Select first as arbitrary sentinel file, storing name and age.
    oldest = files[0], now - os.path.getctime(files[0])
    # Iterate over all remaining files.
    for f in files[1:]:
        age = now - os.path.getctime(f)
        if gt(age, oldest[1]):
            # Set new oldest.
            oldest = f, age
    # Return just the name of oldest file.
    return oldest[0]
	
	
	
def upload_file():
	url = 'https://www.dropbox.com/sh/7yqm1h2ecckr84n/uccKHuNzHL'
	#folder = urllib2.urlopen(url)
	
	#file = urllib2.urlopen(url)
	#files = glob.glob('https://www.dropbox.com/sh/7yqm1h2ecckr84n/uccKHuNzHL/*')
	#print 'oldest:', get_oldest_file(files)
	#print 'youngest:', get_youngest_file(files)
	#print file
	
	file = urllib2.urlopen('https://dl.dropboxusercontent.com/u/67672924/BackUpLapDB-20130328121332')
	for line in file:
		print line
	localFile = open('/somethin12g.csv', 'w')
	localFile.write(file.read())
	localFile.close()
def get_youngest_file(files):
    return get_oldest_file(files, _invert=True)